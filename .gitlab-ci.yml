stages:
  - detect-changes
  - prepare-docker-build
  - build
  - scan
  - precheck
  - push

variables:
  TRIVY_IMAGE: "ghcr.io/aquasecurity/trivy:latest"  # Use the official Trivy image

#default:
#  before_script:
#  - echo "$HARBOR_PASSWD" | docker login $HARBOR_URL -u 'robot$'"$HARBOR_USERNAME" --password-stdin 

detect-changed-folders:
  stage: detect-changes
  script: 
    - |
      # Get the list of changed files in Application-Code directory
      CHANGED_FILES=$(git diff --name-only $CI_COMMIT_BEFORE_SHA $CI_COMMIT_SHA -- Application-Code/)
      
      # Extract top-level dirs
      CHANGED_DIRS=$(echo "$CHANGED_FILES" | grep "^Application-Code/" | awk -F/ '{print $2}' | sort -u || true)
      echo "Changed folders in Application-Code:"
      if [ -z "$CHANGED_DIRS" ]; then
        echo "No changes detected."

        if [ -n "$ACCESS_TOKEN" ]; then
          curl --request POST --header "PRIVATE-TOKEN: $ACCESS_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/cancel" || echo "Warning: Failed to cancel pipeline"
        else
          echo "Warning: ACCESS_TOKEN not set. Cannot cancel pipeline."
          exit 1
        fi
      else
        echo "$CHANGED_DIRS"
      fi
    - echo "$CHANGED_DIRS" > changed_dirs.env
  artifacts:
    paths:
      - changed_dirs.env

generate-build-stage:
  stage: prepare-docker-build
  image: docker:28-dind
  services:
    - docker:28-dind
  script:
    - echo "Generating child pipeline"
    - |
      DIRS=$(cat changed_dirs.env)
      for DIR in $DIRS; do
        cat <<EOF >> docker-build-pipeline.yml
      Build ${DIR} image:
        stage: build
        tags:
          - image-related
        image: docker:28-dind
        services:
          - docker:28-dind
        script:
          - ls -l ./Application-Code
          - echo "Building ${DIR} image"
          - IMAGE=\$HARBOR_URL/\$PROJECT_NAME/${DIR}:\$CI_COMMIT_SHORT_SHA ./Application-Code/$DIR
          - docker build -t \$IMAGE ./Application-Code/${DIR}
          - echo "Pushing image to registry"
          - echo "\$HARBOR_PASSWD" | docker login \$HARBOR_URL -u "robot\$HARBOR_USERNAME" --password-stdin
          - docker push \$IMAGE
      EOF
      done
  artifacts:
    paths:
      - docker-build-pipeline.yml

trigger-docker-build:
  stage: build
  trigger:
    include:
      - artifact: docker-build-pipeline.yml
        job: generate-build-stage
    strategy: depend
  needs:
    - job: generate-build-stage
      artifacts: true

# build-containers:
#   stage: build
#   tags: 
#     - image-related
#   image: docker:28-dind
#   services:
#     - docker:28-dind
#   script:
#     - cat changed_dirs.env
#     - CHANGED_DIRS=$(cat changed_dirs.env)
#     - for DIR in $CHANGED_DIRS; do docker build -t $HARBOR_URL/$PROJECT_NAME/$DIR:$CI_COMMIT_SHORT_SHA ./Application-Code/$DIR; done

# trivy-image-security-scan:
#   stage: scan
#   tags: 
#     - image-related
#   image: docker:28-dind
#   services:
#     - docker:28-dind
#   script:
#     - mkdir image-scan-results
#     - IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep ":${CI_COMMIT_SHORT_SHA}$")
#     - echo "$IMAGES"
#     - |
#       for IMAGE in $IMAGES; do 
#         SHORT_IMAGE_NAME=$(echo "$IMAGE" | cut -d'/' -f3 | cut -d':' -f1); 
#         docker run --rm -v /var/run/docker.sock:/var/run/docker.sock $TRIVY_IMAGE image --severity HIGH,CRITICAL --no-progress --ignore-unfixed $IMAGE >> image-scan-results/${SHORT_IMAGE_NAME}-scan-results.txt & 
#       done
#     - wait
#   artifacts:
#     paths:
#       - image-scan-results   

# trivy-code-security-scan:
#   stage: scan
#   image: aquasec/trivy:latest
#   script:
#     - ls
#     - mkdir code-scan-results
#     - CHANGED_DIRS=$(cat changed_dirs.env)
#     - for DIR in $CHANGED_DIRS; do trivy fs --severity HIGH,CRITICAL --no-progress --ignore-unfixed ./Application-Code/$DIR >> code-scan-results/$DIR-scan-results.txt; done
#   artifacts:
#     paths:
#       - code-scan-results   

# sonarqube-code-quality-scan:
#   stage: scan
#   image: 
#       name: sonarsource/sonar-scanner-cli:11
#       entrypoint: [""]
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     policy: pull-push
#     key: "sonar-cache-$CI_COMMIT_REF_SLUG"
#     paths:
#       - "${SONAR_USER_HOME}/cache"
#       - sonar-scanner/
#   script: 
#     - sonar-scanner -Dsonar.host.url="${SONAR_URL}"
#   allow_failure: true

# Precheck-manual-gate:
#   stage: precheck
#   script:
#     - echo "Manual approval required before pushing images and artifacts."
#   when: manual
#   allow_failure: false

# generate-sbom-files:
#   stage: push
#   tags: 
#     - image-related
#   image: docker:28-dind
#   services:
#     - docker:28-dind
#   script:
#     - mkdir sbom-files
#     - IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep ":${CI_COMMIT_SHORT_SHA}$")
#     - echo "$IMAGES"
#     - |
#       for IMAGE in $IMAGES; do 
#         SHORT_IMAGE_NAME=$(echo "$IMAGE" | cut -d'/' -f3 | cut -d':' -f1); 
#         docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
#         -v $(pwd)/sbom-files:/sbom-files \
#         $TRIVY_IMAGE image --format cyclonedx -o /sbom-files/${SHORT_IMAGE_NAME}-sbom.json $IMAGE & 
#       done
#     - wait
#   artifacts:
#     paths:
#       - sbom-files  

# push-images:
#   stage: push
#   tags: 
#     - image-related
#   image: docker:28-dind
#   services:
#     - docker:28-dind
#   # needs: ["generate-sbom-files"]
#   script:
#     - echo "$HARBOR_PASSWD" | docker login $HARBOR_URL -u 'robot$'"$HARBOR_USERNAME" --password-stdin 
#     - IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep ":${CI_COMMIT_SHORT_SHA}$")
#     - for IMAGE in $IMAGES; do docker push $IMAGE; done

#  upload_to_minio:
#   image: minio/mc
#   stage: push
#   needs: ["generate-sbom-files", "sonarqube-code-quality-scan", "trivy-code-security-scan", "trivy-image-security-scan"]
#   script:
#     - ls
#     - TIMESTAMP=$(date +%Y%m%d)
#     - ARTIFACT_DIR="${TIMESTAMP}_${CI_COMMIT_SHORT_SHA}"
#     - mkdir $ARTIFACT_DIR
#     - mc alias set myminio "$MINIO_URL" "$MINIO_ACCESS_KEY" "$MINIO_SECRET_KEY"
#     - cp -r sbom-files code-scan-results image-scan-results $ARTIFACT_DIR
#     - mc mirror "$ARTIFACT_DIR" myminio/"$MINIO_BUCKET"/"$ARTIFACT_DIR"