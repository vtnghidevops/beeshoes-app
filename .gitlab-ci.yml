stages:
  - detect_changes
  - build
  - security_scan
  - push

variables:
  TRIVY_IMAGE: "ghcr.io/aquasecurity/trivy:latest"  # Use the official Trivy image
  BE_IMAGE: $HARBOR_URL/$PROJECT_NAME/backend:$CI_COMMIT_SHORT_SHA
  FE_IMAGE: $HARBOR_URL/$PROJECT_NAME/frontend:$CI_COMMIT_SHORT_SHA

#default:
#  before_script:
#  - echo "$HARBOR_PASSWD" | docker login $HARBOR_URL -u 'robot$'"$HARBOR_USERNAME" --password-stdin 

detect_changed_folders:
  stage: detect_changes
  script:
    - |
      # Get the list of changed files in Application-Code directory
      CHANGED_FILES=$(git diff --name-only $CI_COMMIT_BEFORE_SHA $CI_COMMIT_SHA -- Application-Code/)
      
      # Extract the top-level directories that changed
      CHANGED_DIRS=$(echo "$CHANGED_FILES" | grep "^Application-Code/" | awk -F/ '{print $2}' | sort -u )
      
      # Output the changed folders
      echo "Changed folders in Application-Code:"
      if [ -z "$CHANGED_DIRS" ]; then
        echo "No changes detected in Application-Code directory"
        # curl --request POST --header "PRIVATE-TOKEN: $ACCESS_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/cancel"
      else
        echo "$CHANGED_DIRS"
        # Save to a file for use in later stages
      fi
    - echo "$CHANGED_DIRS" > changed_dirs.env
  artifacts:
    paths:
      - changed_dirs.env

build-containers:
  stage: build
  tags: 
    - image-related
  image: docker:28-dind
  services:
    - docker:28-dind
  script:
    - cat changed_dirs.env
    - CHANGED_DIRS=$(cat changed_dirs.env)
    - for DIR in $CHANGED_DIRS; do docker build -t $HARBOR_URL/$PROJECT_NAME/$DIR:$CI_COMMIT_SHORT_SHA ./Application-Code/$DIR; done

trivy-image-scan:
  stage: security_scan
  tags: 
    - image-related
  image: docker:28-dind
  services:
    - docker:28-dind
  script:
    - mkdir image-scan-results
    - IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep ":${CI_COMMIT_SHORT_SHA}$")
    - echo "$IMAGES"
    - for IMAGE in $IMAGES; do docker run --rm -v /var/run/docker.sock:/var/run/docker.sock $TRIVY_IMAGE image --severity HIGH,CRITICAL --no-progress --ignore-unfixed $IMAGE >> image-scan-results/${IMAGE//[\/:]/_}-scan-results.txt & done
    - wait
  artifacts:
    paths:
      - image-scan-results   
    # Filesystem scan (code scan)
    #- trivy fs --exit-code 0 --severity HIGH,CRITICAL --no-progress ./Application-Code
    
    # Container image scan
    #- trivy image --exit-code 1 --severity HIGH,CRITICAL --no-progress $DOCKER_IMAGE

trivy-code-scan:
  stage: security_scan
  image: aquasec/trivy:latest
  script:
    - ls
    - mkdir code-scan-results
    - CHANGED_DIRS=$(cat changed_dirs.env)
    - for DIR in $CHANGED_DIRS; do trivy fs --severity HIGH,CRITICAL --no-progress --ignore-unfixed ./Application-Code/$DIR >> code-scan-results/$DIR-scan-results.txt; done
  artifacts:
    paths:
      - code-scan-results   

push-container:
  stage: push
  tags: 
    - image-related
  image: docker:28-dind
  services:
    - docker:28-dind
  script:
    - echo "$HARBOR_PASSWD" | docker login $HARBOR_URL -u 'robot$'"$HARBOR_USERNAME" --password-stdin 
    - IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep ":${CI_COMMIT_SHORT_SHA}$")
    - for IMAGE in $IMAGES; do docker push $IMAGE; done
  when: manual


