stages:
  - build
  - scan
  - approve
  - push

variables:
  TRIVY_IMAGE: "ghcr.io/aquasecurity/trivy:latest"  # Use the official Trivy image
  ARTIFACT_DIR: "trivy-results"  # Directory to store scan results
  BE_IMAGE: $HARBOR_URL/$PROJECT_NAME/backend:$CI_COMMIT_SHORT_SHA
  FE_IMAGE: $HARBOR_URL/$PROJECT_NAME/frontend:$CI_COMMIT_SHORT_SHA

#before_script:
#  - echo "$HARBOR_PASSWD" | docker login $HARBOR_URL -u 'robot$'"$HARBOR_USERNAME" --password-stdin

build-backend:
  stage: build
  script:
    - docker build -t $BE_IMAGE ./Application-Code/backend

build-frontend:
  stage: build
  script:
    - docker build -t $FE_IMAGE ./Application-Code/frontend

trivy-scan:
  stage: scan
  script:
    - mkdir -p $ARTIFACT_DIR
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock $TRIVY_IMAGE image --severity HIGH,CRITICAL --ignore-unfixed $BE_IMAGE > $ARTIFACT_DIR/image-scan-results.txt
  artifacts:
    paths:
      - $ARTIFACT_DIR/image-scan-results.txt      
    # Filesystem scan (code scan)
    #- trivy fs --exit-code 0 --severity HIGH,CRITICAL --no-progress ./Application-Code
    
    # Container image scan
    #- trivy image --exit-code 1 --severity HIGH,CRITICAL --no-progress $DOCKER_IMAGE

review_findings:
  stage: approve
  script:
    - echo "Review scan results and artifacts before pushing to registry"
  when: manual
  allow_failure: false

