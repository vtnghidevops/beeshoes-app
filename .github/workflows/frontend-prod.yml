name: Frontend Production Deployment

on:
  push:
    tags:
    - 'frontend-prod-*'
    - 'release-prod-*'
    - 'v*'
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy (required for production)'
        required: true
        type: string
      confirm_production:
        description: 'Type "PRODUCTION" to confirm deployment'
        required: true
        type: string

env:
  REGISTRY: harbor.deploy.io.vn
  IMAGE_NAME: beeshoes/beeshoes-frontend
  KUBE_NAMESPACE: beeshoes-prod
  HELM_CHART_PATH: ./helm-chart/beeshoes-app
  APP_NAME: beeshoes-frontend
  ENVIRONMENT: production

jobs:
  validate-inputs:
    name: Validate Production Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: Validate confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_production }}" != "PRODUCTION" ]; then
          echo "‚ùå Production deployment not confirmed. Please type 'PRODUCTION' to confirm."
          exit 1
        fi
        echo "‚úÖ Production deployment confirmed"

    - name: Validate image tag
      run: |
        if [ -z "${{ github.event.inputs.image_tag }}" ]; then
          echo "‚ùå Image tag is required for production deployment"
          exit 1
        fi
        echo "‚úÖ Image tag provided: ${{ github.event.inputs.image_tag }}"

  build-and-deploy:
    name: Build and Deploy Frontend to Production
    runs-on: ubuntu-latest
    needs: [ validate-inputs ]
    if: always() && (needs.validate-inputs.result == 'success' || github.event_name == 'push')

    environment:
      name: production
      url: https://beeshoes.deploy.io.vn

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Production deployment notification
      run: |
        echo "üö® PRODUCTION DEPLOYMENT INITIATED üö®"
        echo "Repository: ${{ github.repository }}"
        echo "Triggered by: ${{ github.actor }}"
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.16.0'
        cache: 'yarn'
        cache-dependency-path: beeshoes-frontend/yarn.lock

    - name: Cache Node modules
      uses: actions/cache@v4
      with:
        path: beeshoes-frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('beeshoes-frontend/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      working-directory: beeshoes-frontend
      run: |
        yarn install --frozen-lockfile
        yarn audit --audit-level moderate

    - name: Run full test suite
      working-directory: beeshoes-frontend
      run: |
        yarn test --coverage --watchAll=false --passWithNoTests --verbose
        yarn test:e2e || echo "E2E tests skipped"
      env:
        CI: true

    - name: Build React application for production
      working-directory: beeshoes-frontend
      run: |
        yarn build
      env:
        REACT_APP_API_URL: https://beeshoes.deploy.io.vn/api
        REACT_APP_ENV: production
        NODE_ENV: production
        GENERATE_SOURCEMAP: false

    - name: Run security audit
      working-directory: beeshoes-frontend
      run: |
        yarn audit --audit-level high
        # Check for known vulnerabilities
        yarn audit --json > audit-report.json || true
      continue-on-error: false

    - name: Optimize build
      working-directory: beeshoes-frontend
      run: |
        # Check build size
        du -sh build/
        ls -la build/static/js/
        ls -la build/static/css/
        echo "‚úÖ Build optimization completed"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Login to Harbor Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag,prefix=prod-
          type=sha,prefix=prod-{{sha}}-
          type=raw,value=prod-latest
          type=raw,value=production-${{ github.run_number }}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
        labels: |
          org.opencontainers.image.title=BeeShoes Frontend
          org.opencontainers.image.description=React frontend for BeeShoes e-commerce
          org.opencontainers.image.vendor=BeeShoes Team
          maintainer=devops@beeshoes.com
          environment=production

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./beeshoes-frontend
        file: ./beeshoes-frontend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          REACT_APP_API_URL=https://beeshoes.deploy.io.vn/api
          REACT_APP_ENV=production

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.14.0'

    - name: Configure kubectl
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Backup current deployment
      run: |
        echo "üì¶ Creating backup of current deployment..."
        kubectl get deployment beeshoes-fe-deployment -n ${{ env.KUBE_NAMESPACE }} -o yaml > frontend-backup-$(date +%Y%m%d-%H%M%S).yaml 2>/dev/null || echo "No existing deployment to backup"
        kubectl get configmap -n ${{ env.KUBE_NAMESPACE }} -o yaml > configmaps-backup-$(date +%Y%m%d-%H%M%S).yaml 2>/dev/null || echo "No configmaps to backup"

          - name: Update Helm Chart Repository
        run: |
          # Use provided image tag or extract from metadata
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          else
            IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1 | cut -d':' -f2)
          fi
          
          echo "üöÄ Updating Helm Chart Repository for PRODUCTION with frontend image tag: ${IMAGE_TAG}"
          
          # Clone helm chart repository
          git clone https://${{ secrets.HELM_CHART_TOKEN }}@github.com/${{ secrets.HELM_CHART_REPO_OWNER }}/${{ secrets.HELM_CHART_REPO_NAME }}.git helm-chart-repo
          cd helm-chart-repo
          
          # Configure git
          git config user.email "${{ secrets.GIT_EMAIL }}"
          git config user.name "${{ secrets.GIT_USERNAME }}"
          
          # Update frontend image tag in production values file
          if command -v yq &> /dev/null; then
            yq eval '.frontend.image.tag = "'${IMAGE_TAG}'"' -i charts/beeshoes-app/values-prod.yaml
          else
            # Fallback to sed if yq not available
            sed -i "s|frontend:\s*image:\s*tag:.*|frontend:\n  image:\n    tag: \"${IMAGE_TAG}\"|g" charts/beeshoes-app/values-prod.yaml
          fi
          
          # Commit and push changes
          git add charts/beeshoes-app/values-prod.yaml
          git commit -m "feat(frontend): update production image tag to ${IMAGE_TAG} from commit ${{ github.sha }}"
          git push origin main
          
          echo "‚úÖ Successfully updated helm chart repository with frontend production image tag: ${IMAGE_TAG}"

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/beeshoes-fe-deployment -n ${{ env.KUBE_NAMESPACE }} --timeout=1200s
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app=beeshoes-fe
        kubectl get ingress -n ${{ env.KUBE_NAMESPACE }}
        kubectl get hpa -n ${{ env.KUBE_NAMESPACE }}

    - name: Run production health checks
      run: |
        # Wait for ingress to be ready
        sleep 120

        echo "üè• Running production health checks..."

        # Test frontend accessibility
        for i in {1..10}; do
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://beeshoes.deploy.io.vn)
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Frontend accessibility test passed (attempt $i)"
            break
          else
            echo "‚ö†Ô∏è Frontend accessibility test failed (HTTP $HTTP_CODE) - attempt $i/10"
            if [ $i -eq 10 ]; then
              echo "‚ùå Frontend accessibility tests failed after 10 attempts"
              exit 1
            fi
            sleep 30
          fi
        done

    - name: Run performance validation
      run: |
        echo "üìä Running production performance validation..."

        # Performance test
        RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" https://beeshoes.deploy.io.vn)
        echo "Response time: ${RESPONSE_TIME}s"

        # Validate response time is acceptable (< 3 seconds)
        if (( $(echo "$RESPONSE_TIME < 3.0" | bc -l) )); then
          echo "‚úÖ Performance validation passed"
        else
          echo "‚ö†Ô∏è Performance validation warning: Response time ${RESPONSE_TIME}s exceeds 3s threshold"
        fi

    - name: Run security checks
      run: |
        echo "üîí Running security checks..."

        # Check HTTPS redirect
        HTTP_REDIRECT=$(curl -s -o /dev/null -w "%{redirect_url}" http://beeshoes.deploy.io.vn)
        if [[ $HTTP_REDIRECT == https* ]]; then
          echo "‚úÖ HTTPS redirect working"
        else
          echo "‚ö†Ô∏è HTTPS redirect may not be configured properly"
        fi

        # Check security headers
        curl -I https://beeshoes.deploy.io.vn | grep -i "x-frame-options\|x-content-type-options\|x-xss-protection" || echo "Security headers check completed"

    - name: Post deployment verification
      run: |
        echo "üîç Final deployment verification..."
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app=beeshoes-fe
        kubectl top pods -n ${{ env.KUBE_NAMESPACE }} -l app=beeshoes-fe || echo "Metrics not available"

        # Check if all pods are ready
        READY_PODS=$(kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app=beeshoes-fe --no-headers | grep -c "Running")
        TOTAL_PODS=$(kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app=beeshoes-fe --no-headers | wc -l)

        echo "Ready pods: $READY_PODS/$TOTAL_PODS"

        if [ "$READY_PODS" -eq "$TOTAL_PODS" ] && [ "$TOTAL_PODS" -gt 0 ]; then
          echo "‚úÖ All pods are ready and running"
        else
          echo "‚ùå Some pods are not ready"
          kubectl describe pods -n ${{ env.KUBE_NAMESPACE }} -l app=beeshoes-fe
          exit 1
        fi

    - name: Post deployment summary
      run: |
        echo "üéâ PRODUCTION DEPLOYMENT COMPLETED SUCCESSFULLY üéâ"
        echo ""
        echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        echo "üåç Environment: PRODUCTION"
        echo "üîó URL: https://beeshoes.deploy.io.vn"
        echo "üìä Namespace: ${{ env.KUBE_NAMESPACE }}"
        echo "üë• Replicas: 5"
        echo "üìà Auto-scaling: Enabled (max: 20)"
        echo "‚è∞ Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "üë§ Deployed by: ${{ github.actor }}"
        echo ""
        echo "üü¢ Application is LIVE and serving traffic" 
