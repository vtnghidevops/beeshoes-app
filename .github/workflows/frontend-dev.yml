name: Frontend Development Deployment

on:
  pull_request:
    branches: [ develop ]
    paths:
    - 'beeshoes-frontend/**'
    - 'helm-chart/beeshoes-app/**'
    - '.github/workflows/frontend-dev.yml'
    types: [ closed ]
  push:
    tags:
    - 'frontend-dev-*'
    - 'frontend-*'

env:
  REGISTRY: harbor.deploy.io.vn
  IMAGE_NAME: beeshoes/beeshoes-frontend
  KUBE_NAMESPACE: beeshoes-dev
  HELM_CHART_PATH: ./helm-chart/beeshoes-app
  APP_NAME: beeshoes-frontend
  ENVIRONMENT: development

jobs:
  build-and-deploy:
    name: Build and Deploy Frontend to Development
    runs-on: ubuntu-latest

    # Only run on merged PRs or tag pushes
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))

    environment:
      name: development
      url: https://beeshoes-dev.deploy.io.vn

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.16.0'
        cache: 'yarn'
        cache-dependency-path: beeshoes-frontend/yarn.lock

    - name: Cache Node modules
      uses: actions/cache@v4
      with:
        path: beeshoes-frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('beeshoes-frontend/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      working-directory: beeshoes-frontend
      run: |
        yarn install --frozen-lockfile
        yarn audit --audit-level moderate

    - name: Run tests
      working-directory: beeshoes-frontend
      run: |
        yarn test --coverage --watchAll=false --passWithNoTests
      env:
        CI: true

    - name: Build React application
      working-directory: beeshoes-frontend
      run: |
        yarn build
      env:
        REACT_APP_API_URL: https://beeshoes-dev.deploy.io.vn/api
        REACT_APP_ENV: development
        NODE_ENV: production

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Login to Harbor Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,prefix={{branch}}-
          type=ref,event=pr,prefix=pr-{{pr}}-
          type=ref,event=tag
          type=sha,prefix={{branch}}-{{sha}}-
          type=raw,value=dev-latest
        labels: |
          org.opencontainers.image.title=BeeShoes Frontend
          org.opencontainers.image.description=React frontend for BeeShoes e-commerce
          org.opencontainers.image.vendor=BeeShoes Team
          maintainer=devops@beeshoes.com

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./beeshoes-frontend
        file: ./beeshoes-frontend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          REACT_APP_API_URL=https://beeshoes-dev.deploy.io.vn/api
          REACT_APP_ENV=development

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.14.0'

    - name: Configure kubectl
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

          - name: Update Helm Chart Repository
        run: |
          # Extract image tag for deployment
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1 | cut -d':' -f2)
          
          echo "🔄 Updating Helm Chart Repository with new frontend image tag: ${IMAGE_TAG}"
          
          # Clone helm chart repository
          git clone https://${{ secrets.HELM_CHART_TOKEN }}@github.com/${{ secrets.HELM_CHART_REPO_OWNER }}/${{ secrets.HELM_CHART_REPO_NAME }}.git helm-chart-repo
          cd helm-chart-repo
          
          # Configure git
          git config user.email "${{ secrets.GIT_EMAIL }}"
          git config user.name "${{ secrets.GIT_USERNAME }}"
          
          # Update frontend image tag in dev values file
          if command -v yq &> /dev/null; then
            yq eval '.frontend.image.tag = "'${IMAGE_TAG}'"' -i charts/beeshoes-app/values-dev.yaml
          else
            # Fallback to sed if yq not available
            sed -i "s|frontend:\s*image:\s*tag:.*|frontend:\n  image:\n    tag: \"${IMAGE_TAG}\"|g" charts/beeshoes-app/values-dev.yaml
          fi
          
          # Commit and push changes
          git add charts/beeshoes-app/values-dev.yaml
          git commit -m "feat(frontend): update dev image tag to ${IMAGE_TAG} from commit ${{ github.sha }}"
          git push origin main
          
          echo "✅ Successfully updated helm chart repository with frontend image tag: ${IMAGE_TAG}"

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/beeshoes-fe-deployment -n ${{ env.KUBE_NAMESPACE }} --timeout=600s
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app=beeshoes-fe
        kubectl get ingress -n ${{ env.KUBE_NAMESPACE }}

    - name: Run deployment tests
      run: |
        # Wait for ingress to be ready
        sleep 60

        # Test frontend accessibility
        curl -f -s -o /dev/null -w "%{http_code}" https://beeshoes-dev.deploy.io.vn || exit 1
        echo "✅ Frontend deployed successfully to development environment"

    - name: Cleanup old images
      run: |
        # Keep only the latest 5 images to save registry space
        docker image prune -f
      continue-on-error: true

    - name: Post deployment summary
      run: |
        echo "🚀 Frontend Development Deployment Summary:"
        echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        echo "🌍 Environment: Development"
        echo "🔗 URL: https://beeshoes-dev.deploy.io.vn"
        echo "📊 Namespace: ${{ env.KUBE_NAMESPACE }}"
        echo "⏰ Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" 
